{"ast":null,"code":"var _jsxFileName = \"C:\\\\Deplayment\\\\chaterFrontend\\\\src\\\\components\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useEffect, useState } from 'react';\nimport { faMoon, faSun } from '@fortawesome/free-solid-svg-icons';\nimport Modal from './Modal';\nimport Naber from './Naber';\nimport Tabs from './Tabs';\nimport ChateBox from './ChateBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\n// \"proxy\":\"http://localhost:5000\",\nconst Dashboard = () => {\n  _s();\n  let [userData, setUserData] = useState('');\n  let [haveNotification, sethaveNotification] = useState('user-status');\n  const [selectedUser, setSelectedUser] = useState({\n    fullname: \"\",\n    profilepic: \"\",\n    userId: \"\"\n  });\n  const [chates, setChates] = useState([]);\n  useEffect(() => {\n    getUserInfo();\n    getChates();\n  }, []);\n  const getChates = () => {\n    fetch(\"https://chaterbackend2.onrender.com/api/chats\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(async res => {\n      if (res.status === 200) {\n        res = await res.json();\n        setChates(res);\n        let user = res[0];\n        if (res.length != 0) {\n          setTimeout(() => {\n            setSelectedUser({\n              fullname: user.fullname,\n              profilepic: user.profilepic,\n              userId: user._id,\n              index: 0\n            });\n            console.log(selectedUser);\n          }, 1500);\n        } else {\n          setSelectedUser({\n            fullname: 'Add friend ',\n            profilepic: '../assets/images/avatar-1.png',\n            userId: '1',\n            index: 0\n          });\n        }\n      }\n    });\n  };\n  const getUserInfo = () => {\n    fetch(\"https://chaterbackend2.onrender.com/api/userdata\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(async res => {\n      res = await res.json();\n      setUserData(res);\n      if (res.friendsrequests.length == 0) {\n        sethaveNotification('');\n      } else {\n        sethaveNotification('user-status notification');\n      }\n    });\n  };\n  let [navActive, setnavActive] = useState({\n    navUser: \"nav-link\",\n    navChat: \"active nav-link\",\n    navFriends: \"nav-link\",\n    tapUser: \"tab-pane\",\n    tapChat: \"tab-pane active\",\n    tapFirends: \"tab-pane\"\n  });\n  const setNightAndDarkMode = () => {\n    if (nightDarkMode == faMoon) {\n      setNightDarkMode(faSun);\n      document.body.setAttribute(\"data-layout-mode\", \"dark\");\n    } else {\n      setNightDarkMode(faMoon);\n      document.body.setAttribute(\"data-layout-mode\", \"ligh\");\n    }\n  };\n  let [nightDarkMode, setNightDarkMode] = useState(faMoon);\n  let [showHideChate, setShowHideChate] = useState(\"user-chat w-100\");\n  const [modalActiv, setModalActiv] = useState(false);\n  const [userInfor, setUserInfor] = useState({\n    profilepic: \"\",\n    fullname: \"\",\n    userId: \"\"\n  });\n  const [messages, setMessages] = useState();\n  const getMessages = (id, index) => {\n    fetch(\"/api/messages/\" + id, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(async res => {\n      res = await res.json();\n      setMessages(res);\n      setTimeout(() => {\n        document.getElementById(`conversation${index}`).classList.add('active');\n      }, 100);\n    });\n  };\n  const showModal = (profilepic, fullname, userId) => {\n    setUserInfor({\n      profilepic: profilepic,\n      fullname: fullname,\n      userId: userId\n    });\n    setModalActiv(true);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n      value: {\n        userData,\n        getUserInfo\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"layout-wrapper d-lg-flex\",\n        children: [/*#__PURE__*/_jsxDEV(Naber, {\n          navActive: navActive,\n          setnavActive: setnavActive,\n          setNightAndDarkMode: setNightAndDarkMode,\n          nightDarkMode: nightDarkMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n          navActive: navActive,\n          setShowHideChate: setShowHideChate,\n          showModal: showModal,\n          setSelectedUser: setSelectedUser,\n          getMessages: getMessages,\n          chates: chates\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ChateBox, {\n          showHideChate: showHideChate,\n          setShowHideChate: setShowHideChate,\n          haveNotification: haveNotification,\n          selectedUser: selectedUser,\n          getMessages: getMessages,\n          messages: messages,\n          getChates: getChates,\n          setChates: setChates,\n          sethaveNotification: sethaveNotification,\n          chates: chates,\n          setSelectedUser: setSelectedUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), modalActiv ? /*#__PURE__*/_jsxDEV(Modal, {\n        modal: setModalActiv,\n        userInfor: userInfor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 30\n      }, this) : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(Dashboard, \"ykjkqxasQ+PqnDCHKYaNRw/wQO4=\");\n_c = Dashboard;\nexport default Dashboard;\nexport { UserContext };\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","createContext","useEffect","useState","faMoon","faSun","Modal","Naber","Tabs","ChateBox","jsxDEV","_jsxDEV","Fragment","_Fragment","UserContext","Dashboard","_s","userData","setUserData","haveNotification","sethaveNotification","selectedUser","setSelectedUser","fullname","profilepic","userId","chates","setChates","getUserInfo","getChates","fetch","method","headers","then","res","status","json","user","length","setTimeout","_id","index","console","log","friendsrequests","navActive","setnavActive","navUser","navChat","navFriends","tapUser","tapChat","tapFirends","setNightAndDarkMode","nightDarkMode","setNightDarkMode","document","body","setAttribute","showHideChate","setShowHideChate","modalActiv","setModalActiv","userInfor","setUserInfor","messages","setMessages","getMessages","id","getElementById","classList","add","showModal","children","Provider","value","className","fileName","_jsxFileName","lineNumber","columnNumber","modal","_c","$RefreshReg$"],"sources":["C:/Deplayment/chaterFrontend/src/components/Dashboard.jsx"],"sourcesContent":["import React, { createContext, useEffect, useState } from 'react'\r\nimport {faMoon, faSun,} from '@fortawesome/free-solid-svg-icons'\r\nimport Modal from './Modal'\r\nimport Naber from './Naber'\r\nimport Tabs from './Tabs'\r\nimport ChateBox from './ChateBox'\r\nconst UserContext = createContext();\r\n// \"proxy\":\"http://localhost:5000\",\r\nconst Dashboard = () => {\r\n    let [userData,setUserData] = useState('');\r\n    let [haveNotification,sethaveNotification] = useState('user-status');\r\n    const [selectedUser,setSelectedUser] =  useState({\r\n        fullname:\"\",\r\n        profilepic:\"\",\r\n        userId:\"\"\r\n    });\r\n    const [chates , setChates] = useState([]);\r\n    useEffect(()=>{\r\n        getUserInfo();\r\n        getChates();\r\n        \r\n    },[]);\r\n    const getChates = () =>{\r\n        fetch(\"https://chaterbackend2.onrender.com/api/chats\",{\r\n            method:\"GET\",\r\n            headers:{\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        }).then(async(res)=>{\r\n            if(res.status === 200){\r\n                res =  await res.json();\r\n                setChates(res);\r\n                let user = res[0];\r\n                if(res.length != 0){\r\n                    setTimeout(() => {\r\n                          setSelectedUser({fullname:user.fullname, profilepic:user.profilepic,userId:user._id,index:0});\r\n                        console.log(selectedUser)\r\n                    }, 1500);          \r\n                }\r\n                else{\r\n                    setSelectedUser({fullname:'Add friend ', profilepic:'../assets/images/avatar-1.png',userId:'1',index:0});\r\n                }\r\n            }\r\n        });\r\n    }\r\n    const getUserInfo = () =>{\r\n        fetch(\"https://chaterbackend2.onrender.com/api/userdata\",{\r\n            method:\"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        }).then(async(res)=>{\r\n            res = await res.json();\r\n            setUserData(res);\r\n            if(res.friendsrequests.length == 0){\r\n                sethaveNotification('')\r\n            }\r\n            else{          \r\n                sethaveNotification('user-status notification')\r\n            }\r\n        })\r\n    }\r\n    let [navActive, setnavActive] = useState({\r\n        navUser: \"nav-link\",\r\n        navChat: \"active nav-link\",\r\n        navFriends: \"nav-link\",\r\n        tapUser: \"tab-pane\",\r\n        tapChat: \"tab-pane active\",\r\n        tapFirends: \"tab-pane\"\r\n    });\r\n    const setNightAndDarkMode = () => {\r\n        if (nightDarkMode == faMoon) {\r\n            setNightDarkMode(faSun);\r\n            document.body.setAttribute(\"data-layout-mode\", \"dark\");\r\n        }\r\n        else {\r\n            setNightDarkMode(faMoon);\r\n            document.body.setAttribute(\"data-layout-mode\", \"ligh\");\r\n        }\r\n    }\r\n    let [nightDarkMode, setNightDarkMode] = useState(faMoon);\r\n    let [showHideChate, setShowHideChate] = useState(\"user-chat w-100\");\r\n    const [modalActiv, setModalActiv] = useState(false);\r\n    const [userInfor,setUserInfor] = useState({\r\n        profilepic:\"\",\r\n        fullname:\"\",\r\n        userId:\"\"\r\n    });\r\n    const [messages,setMessages] =  useState();\r\n    const getMessages = (id,index) =>{\r\n        fetch(\"/api/messages/\"+id,{\r\n            method:\"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        }).then(async(res)=>{\r\n            res = await res.json();\r\n            setMessages(res);\r\n            setTimeout(() => {\r\n                document.getElementById(`conversation${index}`).classList.add('active');               \r\n            }, 100);\r\n        });\r\n    }\r\n   \r\n    const showModal = (profilepic,fullname,userId) => {\r\n        setUserInfor({\r\n            profilepic:profilepic,\r\n            fullname:fullname,\r\n            userId:userId \r\n        });\r\n        setModalActiv(true);\r\n    }\r\n    return (\r\n        <>\r\n            <UserContext.Provider value={{userData,getUserInfo}}>\r\n                <div className=\"layout-wrapper d-lg-flex\">\r\n                    <Naber navActive={navActive} setnavActive={setnavActive} setNightAndDarkMode={setNightAndDarkMode} nightDarkMode={nightDarkMode} />\r\n                    <Tabs navActive={navActive} setShowHideChate={setShowHideChate} showModal={showModal} setSelectedUser={setSelectedUser}  getMessages={getMessages} chates={chates}/>\r\n                    <ChateBox showHideChate={showHideChate} setShowHideChate={setShowHideChate} haveNotification={haveNotification} selectedUser={selectedUser} getMessages={getMessages} messages={messages} getChates={getChates} setChates={setChates} sethaveNotification={sethaveNotification} chates={chates} setSelectedUser={setSelectedUser}/>\r\n                </div>\r\n                {modalActiv ?<Modal modal={setModalActiv} userInfor={userInfor} />: ''}\r\n            </UserContext.Provider>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Dashboard;\r\nexport {UserContext}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACjE,SAAQC,MAAM,EAAEC,KAAK,QAAQ,mCAAmC;AAChE,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,QAAQ,MAAM,YAAY;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACjC,MAAMC,WAAW,gBAAGb,aAAa,EAAE;AACnC;AACA,MAAMc,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,IAAI,CAACC,QAAQ,EAACC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACzC,IAAI,CAACgB,gBAAgB,EAACC,mBAAmB,CAAC,GAAGjB,QAAQ,CAAC,aAAa,CAAC;EACpE,MAAM,CAACkB,YAAY,EAACC,eAAe,CAAC,GAAInB,QAAQ,CAAC;IAC7CoB,QAAQ,EAAC,EAAE;IACXC,UAAU,EAAC,EAAE;IACbC,MAAM,EAAC;EACX,CAAC,CAAC;EACF,MAAM,CAACC,MAAM,EAAGC,SAAS,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EACzCD,SAAS,CAAC,MAAI;IACV0B,WAAW,EAAE;IACbC,SAAS,EAAE;EAEf,CAAC,EAAC,EAAE,CAAC;EACL,MAAMA,SAAS,GAAGA,CAAA,KAAK;IACnBC,KAAK,CAAC,+CAA+C,EAAC;MAClDC,MAAM,EAAC,KAAK;MACZC,OAAO,EAAC;QACJ,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC,CAACC,IAAI,CAAC,MAAMC,GAAG,IAAG;MAChB,IAAGA,GAAG,CAACC,MAAM,KAAK,GAAG,EAAC;QAClBD,GAAG,GAAI,MAAMA,GAAG,CAACE,IAAI,EAAE;QACvBT,SAAS,CAACO,GAAG,CAAC;QACd,IAAIG,IAAI,GAAGH,GAAG,CAAC,CAAC,CAAC;QACjB,IAAGA,GAAG,CAACI,MAAM,IAAI,CAAC,EAAC;UACfC,UAAU,CAAC,MAAM;YACXjB,eAAe,CAAC;cAACC,QAAQ,EAACc,IAAI,CAACd,QAAQ;cAAEC,UAAU,EAACa,IAAI,CAACb,UAAU;cAACC,MAAM,EAACY,IAAI,CAACG,GAAG;cAACC,KAAK,EAAC;YAAC,CAAC,CAAC;YAC/FC,OAAO,CAACC,GAAG,CAACtB,YAAY,CAAC;UAC7B,CAAC,EAAE,IAAI,CAAC;QACZ,CAAC,MACG;UACAC,eAAe,CAAC;YAACC,QAAQ,EAAC,aAAa;YAAEC,UAAU,EAAC,+BAA+B;YAACC,MAAM,EAAC,GAAG;YAACgB,KAAK,EAAC;UAAC,CAAC,CAAC;QAC5G;MACJ;IACJ,CAAC,CAAC;EACN,CAAC;EACD,MAAMb,WAAW,GAAGA,CAAA,KAAK;IACrBE,KAAK,CAAC,kDAAkD,EAAC;MACrDC,MAAM,EAAC,KAAK;MACZC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC,CAACC,IAAI,CAAC,MAAMC,GAAG,IAAG;MAChBA,GAAG,GAAG,MAAMA,GAAG,CAACE,IAAI,EAAE;MACtBlB,WAAW,CAACgB,GAAG,CAAC;MAChB,IAAGA,GAAG,CAACU,eAAe,CAACN,MAAM,IAAI,CAAC,EAAC;QAC/BlB,mBAAmB,CAAC,EAAE,CAAC;MAC3B,CAAC,MACG;QACAA,mBAAmB,CAAC,0BAA0B,CAAC;MACnD;IACJ,CAAC,CAAC;EACN,CAAC;EACD,IAAI,CAACyB,SAAS,EAAEC,YAAY,CAAC,GAAG3C,QAAQ,CAAC;IACrC4C,OAAO,EAAE,UAAU;IACnBC,OAAO,EAAE,iBAAiB;IAC1BC,UAAU,EAAE,UAAU;IACtBC,OAAO,EAAE,UAAU;IACnBC,OAAO,EAAE,iBAAiB;IAC1BC,UAAU,EAAE;EAChB,CAAC,CAAC;EACF,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;IAC9B,IAAIC,aAAa,IAAIlD,MAAM,EAAE;MACzBmD,gBAAgB,CAAClD,KAAK,CAAC;MACvBmD,QAAQ,CAACC,IAAI,CAACC,YAAY,CAAC,kBAAkB,EAAE,MAAM,CAAC;IAC1D,CAAC,MACI;MACDH,gBAAgB,CAACnD,MAAM,CAAC;MACxBoD,QAAQ,CAACC,IAAI,CAACC,YAAY,CAAC,kBAAkB,EAAE,MAAM,CAAC;IAC1D;EACJ,CAAC;EACD,IAAI,CAACJ,aAAa,EAAEC,gBAAgB,CAAC,GAAGpD,QAAQ,CAACC,MAAM,CAAC;EACxD,IAAI,CAACuD,aAAa,EAAEC,gBAAgB,CAAC,GAAGzD,QAAQ,CAAC,iBAAiB,CAAC;EACnE,MAAM,CAAC0D,UAAU,EAAEC,aAAa,CAAC,GAAG3D,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAAC4D,SAAS,EAACC,YAAY,CAAC,GAAG7D,QAAQ,CAAC;IACtCqB,UAAU,EAAC,EAAE;IACbD,QAAQ,EAAC,EAAE;IACXE,MAAM,EAAC;EACX,CAAC,CAAC;EACF,MAAM,CAACwC,QAAQ,EAACC,WAAW,CAAC,GAAI/D,QAAQ,EAAE;EAC1C,MAAMgE,WAAW,GAAGA,CAACC,EAAE,EAAC3B,KAAK,KAAI;IAC7BX,KAAK,CAAC,gBAAgB,GAACsC,EAAE,EAAC;MACtBrC,MAAM,EAAC,KAAK;MACZC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC,CAACC,IAAI,CAAC,MAAMC,GAAG,IAAG;MAChBA,GAAG,GAAG,MAAMA,GAAG,CAACE,IAAI,EAAE;MACtB8B,WAAW,CAAChC,GAAG,CAAC;MAChBK,UAAU,CAAC,MAAM;QACbiB,QAAQ,CAACa,cAAc,CAAE,eAAc5B,KAAM,EAAC,CAAC,CAAC6B,SAAS,CAACC,GAAG,CAAC,QAAQ,CAAC;MAC3E,CAAC,EAAE,GAAG,CAAC;IACX,CAAC,CAAC;EACN,CAAC;EAED,MAAMC,SAAS,GAAGA,CAAChD,UAAU,EAACD,QAAQ,EAACE,MAAM,KAAK;IAC9CuC,YAAY,CAAC;MACTxC,UAAU,EAACA,UAAU;MACrBD,QAAQ,EAACA,QAAQ;MACjBE,MAAM,EAACA;IACX,CAAC,CAAC;IACFqC,aAAa,CAAC,IAAI,CAAC;EACvB,CAAC;EACD,oBACInD,OAAA,CAAAE,SAAA;IAAA4D,QAAA,eACI9D,OAAA,CAACG,WAAW,CAAC4D,QAAQ;MAACC,KAAK,EAAE;QAAC1D,QAAQ;QAACW;MAAW,CAAE;MAAA6C,QAAA,gBAChD9D,OAAA;QAAKiE,SAAS,EAAC,0BAA0B;QAAAH,QAAA,gBACrC9D,OAAA,CAACJ,KAAK;UAACsC,SAAS,EAAEA,SAAU;UAACC,YAAY,EAAEA,YAAa;UAACO,mBAAmB,EAAEA,mBAAoB;UAACC,aAAa,EAAEA;QAAc;UAAAuB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAG,eACnIrE,OAAA,CAACH,IAAI;UAACqC,SAAS,EAAEA,SAAU;UAACe,gBAAgB,EAAEA,gBAAiB;UAACY,SAAS,EAAEA,SAAU;UAAClD,eAAe,EAAEA,eAAgB;UAAE6C,WAAW,EAAEA,WAAY;UAACzC,MAAM,EAAEA;QAAO;UAAAmD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAE,eACpKrE,OAAA,CAACF,QAAQ;UAACkD,aAAa,EAAEA,aAAc;UAACC,gBAAgB,EAAEA,gBAAiB;UAACzC,gBAAgB,EAAEA,gBAAiB;UAACE,YAAY,EAAEA,YAAa;UAAC8C,WAAW,EAAEA,WAAY;UAACF,QAAQ,EAAEA,QAAS;UAACpC,SAAS,EAAEA,SAAU;UAACF,SAAS,EAAEA,SAAU;UAACP,mBAAmB,EAAEA,mBAAoB;UAACM,MAAM,EAAEA,MAAO;UAACJ,eAAe,EAAEA;QAAgB;UAAAuD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAE;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACjU,EACLnB,UAAU,gBAAElD,OAAA,CAACL,KAAK;QAAC2E,KAAK,EAAEnB,aAAc;QAACC,SAAS,EAAEA;MAAU;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,GAAE,EAAE;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACnD,iBACxB;AAEX,CAAC;AAAAhE,EAAA,CApHKD,SAAS;AAAAmE,EAAA,GAATnE,SAAS;AAsHf,eAAeA,SAAS;AACxB,SAAQD,WAAW;AAAC,IAAAoE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}